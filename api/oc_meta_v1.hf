#url /api/v1
#type api
#base http://127.0.0.1:8080
#title REST API for OC Meta
#description This is the REST API for OC Meta, the OpenCitations Index containing bibliographic metadata associated with the documents involved in the citations stored in the OpenCitations infrastructure. All the present operations return either a JSON document (default) or a CSV document according to the mimetype specified in the `Accept` header of the request. If you would like to suggest an additional operation to be included in this API, please use the [issue tracker](https://github.com/opencitations/api/issues) of the OpenCitations APIs available on GitHub.
#version Version 1.0.0 (2020-06-10)
#contacts [contact@opencitations.net](mailto:contact@opencitations.net)
#license This document is licensed with a [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/legalcode), while the REST API itself has been created using [RAMOSE](https://github.com/opencitations/ramose), the *Restful API Manager Over SPARQL Endpoints* created by [Silvio Peroni](https://orcid.org/0000-0003-0530-4305), which is licensed with an [ISC license](https://opensource.org/licenses/ISC).
#endpoint http://127.0.0.1:9999/blazegraph/sparql
#method get
#addon oc_meta_addon

#url /metadata/{ids}
#type operation
#preprocess split_ids(ids)
#postprocess create_metadata_output()
#method get
#description This operation retrieves the bibliographic metadata for each of the bibliographic entities identified by one or more input IDs.

It is possible to specify one or more IDs as input of this operation. In this case, the IDs should be separated with a double underscore ("\_\_") â€“ e.g. "10.1108/jd-12-2013-0166\_\_10.1016/j.websem.2012.08.001\_\_...". The fields returned by this operation are:

* *id*: the IDs of the bibliographic entity;
* *title*: the title of the bibliographic entity;
* *author*: the semicolon-separated list of authors of the bibliographic entity;
* *date*: the date of publication of the bibliographic entity;
* *source_title*: the title of the venue where the bibliographic entity has been published;
* *source_id*: the semicolon-separated list of identifiers referring to the source where the bibliographic entity has been published;
* *volume*: the number of the volume in which the bibliographic entity has been published;
* *issue*: the number of the issue in which the bibliographic entity has been published;
* *page*: the starting and ending pages of the bibliographic entity in the context of the venue where it has been published;
* *type*: the type of the bibliographic entity;
#call /metadata/10.1108/jd-12-2013-0166__10.6084/m9.figshare.3443876
#field_type str(id) str(title) str(author) datetime(date) str(source_title) str(source_id) str(volume) str(issue) str(page) str(type)
#output_json [
    {
        "author": "Peroni, Silvio; Dutton, Alexander; Gray, Tanya; Shotton, David",
        "volume": "71",
        "page": "253-277",
        "source_id": "issn:0022-0418",
        "source_title": "Journal Of Documentation",
        "date": "01-05-2015",
        "id": "10.1108/jd-12-2013-0166",
        "title": "Setting Our Bibliographic References Free: Towards Open Citation Data",
        "issue": "2",
        "type": "journal article"
    },
    {
        "author": "Peroni, Silvio, 0000-0003-0530-4305; Shotton, David, 0000-0001-5506-523X",
        "volume": "",
        "page": "",
        "source_id": "",
        "source_title": "Figshare",
        "year": "2018",
        "id": "10.6084/m9.figshare.3443876",
        "title": "The OpenCitations Data Model",
        "issue": "",
        "type": "other"
    }
]
#sparql prefix literal: <http://www.essepuntato.it/2010/06/literalreification/>
prefix datacite: <http://purl.org/spar/datacite/>
PREFIX dcterm: <http://purl.org/dc/terms/>
PREFIX frbr: <http://purl.org/vocab/frbr/core#>
PREFIX fabio: <http://purl.org/spar/fabio/>
PREFIX prism: <http://prismstandard.org/namespaces/basic/2.0/>
SELECT ?res 
(GROUP_CONCAT(DISTINCT ?type_; separator=' ;and; ') AS ?type)
(GROUP_CONCAT(DISTINCT ?date_; separator=' ;and; ') AS ?date)
(GROUP_CONCAT(DISTINCT ?num; separator=' ;and; ') AS ?num_)
(GROUP_CONCAT(DISTINCT ?part1; separator=' ;and; ') AS ?part1_)
(GROUP_CONCAT(DISTINCT ?title1; separator=' ;and; ') AS ?title1_)
(GROUP_CONCAT(DISTINCT ?num1; separator=' ;and; ') AS ?num1_)
(GROUP_CONCAT(DISTINCT ?type1; separator=' ;and; ') AS ?type1_)
(GROUP_CONCAT(DISTINCT ?part2; separator=' ;and; ') AS ?part2_)
(GROUP_CONCAT(DISTINCT ?title2; separator=' ;and; ') AS ?title2_)
(GROUP_CONCAT(DISTINCT ?num2; separator=' ;and; ') AS ?num2_)
(GROUP_CONCAT(DISTINCT ?type2; separator=' ;and; ') AS ?type2_)
(GROUP_CONCAT(DISTINCT ?part3; separator=' ;and; ') AS ?part3_)
(GROUP_CONCAT(DISTINCT ?title3; separator=' ;and; ') AS ?title3_)
(GROUP_CONCAT(DISTINCT ?num3; separator=' ;and; ') AS ?num3_)
(GROUP_CONCAT(DISTINCT ?type3; separator=' ;and; ') AS ?type3_)
WHERE {
  	?res datacite:hasIdentifier/literal:hasLiteralValue ?literalValue.
    ?res a ?type_.
    OPTIONAL {?res prism:publicationDate ?date_.}
    OPTIONAL {?res fabio:hasSequenceIdentifier ?num.}
    OPTIONAL {
        ?res frbr:partOf ?part1.
        OPTIONAL {?part1 dcterm:title ?title1.}
        OPTIONAL {?part1 fabio:hasSequenceIdentifier ?num1.}
        ?part1 a ?type1.
        OPTIONAL {
            ?part1 frbr:partOf ?part2.
            OPTIONAL {?part2 dcterm:title ?title2.}
            OPTIONAL {?part2 fabio:hasSequenceIdentifier ?num2.}
            ?part2 a ?type2.
            OPTIONAL{
                ?part2 frbr:partOf ?part3.
                OPTIONAL {?part3 dcterm:title ?title3.}
                OPTIONAL {?part3 fabio:hasSequenceIdentifier ?num3.}
                ?part3 a ?type3.
            }
        }   
    }
    VALUES ?literalValue {[[ids]]}
}
GROUP BY ?res
